apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.name" . }}
  labels:
    simpletrip: {{ include "common.name" . }}
    {{- if .Values.labels }}
    {{- include "common.tplvalues.render" (dict "value" .Values.labels "context" $) | nindent 4 }}
    {{- end }}
spec:
  revisionHistoryLimit: {{ .Values.deployment.revisionHistoryLimit }}
  selector:
    matchLabels:
      simpletrip: {{ include "common.name" . }}
  template:
    metadata:
      labels:
        simpletrip: {{ include "common.name" . }}
        app.kubernetes.io/name: {{ include "common.name" . }}
        app.kubernetes.io/version: "{{ .Chart.AppVersion }}"
        {{- if .Values.labels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.labels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      containers:
      - name: {{ include "common.containerName" . }}
        image: "{{ include "common.repository" . }}/{{ template "common.name" . }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if .Values.args }}
        args: {{- include "common.tplvalues.render" (dict "value" .Values.args "context" $) | nindent 10 }}
        {{- end }}
        {{- if .Values.resources }}
        resources: {{- include "common.tplvalues.render" (dict "value" .Values.resources "context" $) | trim | nindent 10 }}
        {{- end }}
        ports:
        - containerPort: {{ .Values.service.port }}
{{- if .Values.service.https.enabled }}
        - containerPort: {{ .Values.service.https.port }}
{{- end }}
        envFrom:
        - configMapRef:
            name: spring-boot-cloud
{{- if .Values.mockClientsConfEnabled }}
        - configMapRef:
            name: mock-clients-configuration
            optional: true
{{- end }}
        livenessProbe:
          httpGet:
            path: {{ .Values.livenessProbe.path }}
            port: {{ .Values.service.port }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
        readinessProbe:
          httpGet:
            path: {{ .Values.readinessProbe.path }}
            port: {{ .Values.service.port }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
        env:
{{- if .Values.extraEnv }}
{{- include "common.tplvalues.render" (dict "value" .Values.extraEnv "context" $) | nindent 8 }}
{{- end }}
{{- if .Values.secrets.enabled }}
        - name: SPRING_CONFIG_ADDITIONAL-LOCATION
          value: file:/etc/secrets/
{{- end }}
        - name: SPRING_ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: spring-boot-cloud
              key: spring.environment
        - name: CLOUD_ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: spring-boot-cloud
              key: cloud.environment
        - name: SERVER_PORT
          value: {{ quote .Values.service.port }}
{{- if .Values.aws.enabled }}
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ .Values.aws.secretKeyRefName }}
              key: key_id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.aws.secretKeyRefName }}
              key: secret
{{- end }}
{{- if .Values.secrets.dynamicSecrets.enabled }}
{{- range .Values.secrets.dynamicSecrets.secrets }}
{{- if eq .type "aws" }}
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ .name }}
              key: access_key
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .name }}
              key: secret_key
{{- end }}
{{- if eq .type "database" }}
        - name: USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .name }}
              key: username
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .name }}
              key: password
{{- end }}
{{- end }}
{{- end }}
{{- if .Values.secrets.staticSecrets.enabled }}
{{- range .Values.secrets.staticSecrets.secrets }}
{{/* helm range changes scope. */}}
{{- $secretsScope := . -}}
{{- range .secretKeys }}
        - name: {{ . }}
          valueFrom:
            secretKeyRef:
              name: {{ $secretsScope.secretName }}
              key: {{ . }}
{{- end }}
{{- end }}
{{- end }}
        - name: DD_AGENT_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: DD_TRACE_ENABLED
          valueFrom:
            configMapKeyRef:
              name: datadog-config
              key: apm.enabled
        - name: {{ .Values.datadog.serviceNameEnv}}
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['simpletrip']
        - name: DD_LOGS_INJECTION
          valueFrom:
            configMapKeyRef:
              name: datadog-config
              key: apm.enabled
        - name: DD_TRACE_ANALYTICS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: datadog-config
              key: apm.enabled
{{- if .Values.datadog.analyzedSpansEnabled }}
        - name: DD_APM_ANALYZED_SPANS
          value: 'true'
{{- end }}
{{- if .Values.secrets.enabled }}
        volumeMounts:
        - name: {{ .Values.secrets.name }}
          mountPath: /etc/secrets/
          readOnly: true
      volumes:
      - name: {{ .Values.secrets.name }}
        secret:
          secretName: {{ .Values.secrets.name }}
{{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: simpletrip
                operator: In
                values:
                - {{ include "common.name" . }}
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        role: general-purpose
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
